{% assign vpes = product.metafields.custom.vpe | newline_to_br | split: '<br />' %}

{%- liquid
   assign amounts = ''
   assign labels = ''
   assign selected_value = ''
   for vpe in vpes
     assign vpedata = vpe | split: '-'
     assign amount = vpedata[0] | strip
     assign label = vpedata[1] | strip
     if forloop.index0 > 0
       assign amounts = amounts | append: ','
       assign labels = labels | append: ','
     else
       assign selected_value = amount
     endif
     assign amounts = amounts | append: amount
     assign labels = labels | append: label
   endfor

   assign option_values = amounts | split: ','
   assign option_names = labels | split: ','
-%}

{% assign vpedata = vpes | split: '-' %}

          <div class="option-selector" data-selector-type="dropdown" data-option-index="{{ forloop.index0 }}">
            {% render 'custom-select',
              id: 'customQuantitySelector',
              label: 'Menge',
              option_values: option_values,
              option_names: option_names,
              selected_value: selected_value,
              include_native: true,
              native_name: 'quantity'
            %}
          </div>
<script>
var hsnPrices = [];
var hsnOriginalSinglePrice;
var hsnOriginalUnitPrice;

var hsnLoadPrices = function()  {
  var $rows = $('.STP-tiers tr');
  $rows.each(function()  {
    var text = $(this).text();
    var begin = 0;
    var info = [];
    var names = ['min', 'price'];
    var addPriceInfo = true;
    for(var i=0; i < names.length; i++)  {
      while((begin < text.length) && isNaN(parseInt(text.substr(begin))))  {
        begin++;
      }
      var infopart = parseFloat(text.substr(begin));
      if(isNaN(infopart))  {
        addPriceInfo = false;
      }
      info[names[i]] = infopart;
      begin += ('i' + infopart).length;
    }
    if(addPriceInfo)  {
      hsnPrices.push(info);
    }
  });
}

var hsnUpdatePrices = function()  {
  if(hsnPrices.length < 2)  {
    hsnLoadPrices();
  }
  $nativeElement = $('#customQuantitySelector-native');
  var amount = parseInt($nativeElement.val());
  for(var i = 0; i < hsnPrices.length; i++)  {
    if(hsnPrices[i].min <= amount)  {
      var price = hsnPrices[i].price;
    }
  }
  $('.current-price').text('€' + (price * amount));
  $('.unit-price__price').text('€' + Math.round(hsnOriginalUnitPrice * (price / hsnOriginalSinglePrice) * 100) / 100);
}

var hsnInitPriceFunctionality = function()  {
  hsnOriginalSinglePrice = parseFloat($('.current-price').text().substr(1).replace(',','.'))
  hsnOriginalUnitPrice = parseFloat($('.unit-price__price').text().substr(1).replace(',','.'))
  hsnPrices.push({min: 1, price: hsnOriginalSinglePrice});

  $('#customQuantitySelector-native').on('change', hsnUpdatePrices);
  hsnUpdatePrices();
}
  
setTimeout(hsnInitPriceFunctionality, 1500);
</script>
